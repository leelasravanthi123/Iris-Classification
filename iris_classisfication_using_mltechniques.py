# -*- coding: utf-8 -*-
"""IRIS Classisfication Using MLTechniques.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AxP_D1_-FuZ-wkPlweGq5MXBbgCf2zx0

# **BHARAT**  **INTERN** **MACHINE** **LEARNING**

1.   **Name** : PATHELLA.LEELA SRAVANTHI
2.   **Persuing**: COMPUTER SCIENCE & ENGINEERING WITH ARTIFICIAL  INTELLIGENCE & MACHINE LEARNING 3rd Year

**Title of the Report :**   **Iris Classification**

## **IRIS CLASSIFICATION**
"""

import pandas as pd
columns=["sepal length","sepal width","petal length","petal width","class_labels"]
df=pd.read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data",names=columns)
df.head()

"""## Checking for null values in data or not ?..."""

df.isnull().sum()

"""## Seggregating the features and labels ..."""

x=df.iloc[:,:-1]
y=df.iloc[:,-1]
print(x)      #features

Y=pd.DataFrame(y,columns=["class_labels"])
Y     #labels

"""## Splitting the Data into Train and Test"""

from sklearn.model_selection import train_test_split

x_train,x_test,Y_train,Y_test = train_test_split(x,Y,test_size=0.2,random_state=1)
x_train

x_test.head()   #here we displaying the first few samples in x_test data

Y_train.head(8)

Y_test.head(8)  # here displaying the first 8 samples

"""## Using LogisticRegression Model"""

from sklearn.linear_model import LogisticRegression

logisticRegr = LogisticRegression()
logisticRegr.fit(x_train, Y_train)

Y_pred = logisticRegr.predict(x_test)
print(Y_pred)  # these are predicted labels

"""## Accuracy of model"""

from sklearn.metrics import accuracy_score

acc = accuracy_score(Y_test,Y_pred)
print("Accuracy of LR model: %.2f" % (acc*100),"%")

"""## We will see the prformance of after applying the scaling methods

### Applying the Scaling method  i.e.,MinMaxScaler
"""

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
x_scaled=scaler.fit_transform(x)
 # these is the one of the scaling method that is MinMaxScaler()

x1=pd.DataFrame(x_scaled)
x1.head(5)  #heere we displaying the first few rows in features

from sklearn.model_selection import train_test_split
x1_train,x1_test,Y_train,Y_tes=train_test_split(x1,Y,test_size=0.2,random_state=1)
x1_train.head(5)

x1_test.head(5)

Y_train.head(5)

Y_test.head(5)

"""### Using LogisticRegression model"""

from sklearn.linear_model import LogisticRegression
logisticRegr = LogisticRegression()
logisticRegr.fit(x1_train, Y_train)

Y_pred = logisticRegr.predict(x1_test)
print(Y_pred)

"""## Accuracy of Model"""

from sklearn.metrics import accuracy_score
acc = accuracy_score(Y_test,Y_pred)
print("Accuracy of LR model: %.2f" % (acc*100),"%")

"""## Now will see the another scaling method performance i.e., StandardScaler"""

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
x_scaled=scaler.fit_transform(x)

x2=pd.DataFrame(x_scaled)
x2.head(5)

from sklearn.model_selection import train_test_split
x2_train,x2_test,Y_train,Y_tes=train_test_split(x2,Y,test_size=0.2,random_state=1)
x2_train.head(5)

x2_test.head(5)

"""## Same as normal model like LogistRegression Model"""

from sklearn.linear_model import LogisticRegression
logisticRegr = LogisticRegression()
logisticRegr.fit(x2_train, Y_train)

Y_pred = logisticRegr.predict(x2_test)
print(Y_pred)

"""## Accuracy for after scalling of logisticRegression model"""

from sklearn.metrics import accuracy_score

acc = accuracy_score(Y_test,Y_pred)
print("Accuracy of LR model: %.2f" % (acc*100),"%")

"""### variations of performace due to adjusting  the sizes of test split

like test_split= 0.2 , 0.3 ,0.5

### Now will see the model performance for test zise 0.3
"""

from sklearn.model_selection import train_test_split

x_train,x_test,Y_train,Y_test = train_test_split(x,Y,test_size=0.3,random_state=1)
x_train.head(5)

x_test.head(5)

Y_train.head(5)

Y_test.head(5)

from sklearn.linear_model import LogisticRegression
logisticRegr = LogisticRegression()
logisticRegr.fit(x_train, Y_train)

Y_pred = logisticRegr.predict(x_test)
print(Y_pred)

"""### Accuracy of model"""

from sklearn.metrics import accuracy_score

acc = accuracy_score(Y_test,Y_pred)
print("Accuracy of LR model: %.2f" % (acc*100),"%")

"""### Now we will see the model performance for test size is 0.5"""

from sklearn.model_selection import train_test_split
x_train,x_test,Y_train,Y_test=train_test_split(x,Y,test_size=0.5,random_state=1)
x_train.head(5)

x_test.head(5)

Y_train.head(5)

Y_test.head(5)

from sklearn.linear_model import LogisticRegression
logisticRegr=LogisticRegression()
logisticRegr.fit(x_train,Y_train)

Y_pred=logisticRegr.predict(x_test)
print(Y_pred)

"""### Accuracy of model"""

from sklearn.metrics import accuracy_score

acc = accuracy_score(Y_test,Y_pred)
print("Accuracy of LR model: %.2f" % (acc*100),"%")

"""### Using K-Fold Cross Validation

### Now we will see the performance for 3 splits in KFold
"""

from sklearn.model_selection import KFold
kf = KFold(n_splits=3)
kf.get_n_splits(df)

kf = KFold(n_splits=3, random_state=None, shuffle=True)
for i, (train_index, test_index) in enumerate(kf.split(df)):
     print(f"Fold {i}:")
     print(f"  Train: index={train_index}")
     print(f"  Test:  index={test_index}")

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
kf = KFold(n_splits=3, random_state=1, shuffle=True)
for (train_data, test_data) in (kf.split(df)):
    logisticRegr = LogisticRegression()
    X_train = df.iloc[train_data,:-1]
    y_train = df.iloc[train_data,-1]
    X_test = df.iloc[test_data,:-1]
    y_test = df.iloc[test_data,-1]

    logisticRegr.fit(X_train, y_train)
    y_pred = logisticRegr.predict(X_test)

    acc = accuracy_score(y_test,y_pred)
    print(acc)

import statistics as stat
a=stat.mean([0.98,0.94,0.96])
a  #average accuracy for splits using 3 KFold

"""### Now we will see the performance for 5 splits of KFold"""

from sklearn.model_selection import KFold
kf = KFold(n_splits=5)
kf.get_n_splits(df)

kf = KFold(n_splits=5, random_state=None, shuffle=False)
for i, (train_index, test_index) in enumerate(kf.split(df)):
     print(f"Fold {i}:")
     print(f"  Train: index={train_index}")
     print(f"  Test:  index={test_index}")

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
kf = KFold(n_splits=5, random_state=1, shuffle=True)

for (train_data, test_data) in (kf.split(df)):
    logisticRegr = LogisticRegression()
    X_train = df.iloc[train_data,:-1]
    y_train = df.iloc[train_data,-1]
    X_test = df.iloc[test_data,:-1]
    y_test = df.iloc[test_data,-1]

    logisticRegr.fit(X_train, y_train)
    y_pred = logisticRegr.predict(X_test)

    acc = accuracy_score(y_test,y_pred)
    print(acc)

import statistics as stat
a=stat.mean([0.9666666666666667,
0.9666666666666667,
0.9333333333333333,
0.9333333333333333,
1.0])
a  # average accuracy of 5 splits k-Fold

"""## Visualizing the performances of different cases of model"""

import pandas as pd
names=["original dataset","original dataset","original dataset","original dataset","preprocessed and normalization","preprocessed and normalization","k-fold","k-fold","k-fold"]
types=["Train test with 80:20 splits","Train test with 70:30 splits","Train test with 60:40 splits","Train test with 50:50 splits","min-max","standard","k=3","k=5","k=10"]
Accuracy=["96.67%","97.78%","96.67%","97.33%","90.00%","96.67%","96.00%","96.00%","95.33333334%"]
a=pd.DataFrame(names,columns=["Names"])
a["Types"]=pd.DataFrame(types)
a["Accuracy"]=pd.DataFrame(Accuracy)
a

"""## Testing this model"""

## input sample
a=[[0.2,0.4,0.5,0.8]]
logisticRegr.predict(a)

"""**REPORT  :-**

Scaling, k-fold cross-validation, and train-test splits are techniques used in machine learning to enhance model performance, validate results, and manage data effectively.
"""

